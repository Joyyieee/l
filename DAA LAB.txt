PROGRAM 1  (LINEAR SEARCH)

#include<stdio.h>
#include<time.h>
#include<stdlib.h>
#include<dos.h>
#include<conio.h>
int LinearSearch(int a[],int n,int key)
{
int i;
for(i=0;i<n;i++)
{
if(key==a[i])
return i;
}
return -1;
}
void main()
{
char ch;
int a[100],n,key,i,res,CLOCK_TCK;
double clock_t,st,et;
double time_taken;
clrscr();
printf("Enter the number of elements in the array");
scanf("%d",&n);
printf("Enter the elements of array");
for(i=0;i<n;i++)
scanf("%d",&a[i]);
printf("Enter the key element to search");
scanf("%d",&key);
st=clock();
delay(250);
res=LinearSearch(a,n,key);
et=clock();
time_taken=(((double)(et-st))/CLOCK_TCK);
if(res==-1)
{
printf("The search elementis not found");
printf("\nThe exicution time is = %f miliseconds",time_taken);
}
else
{
printf("The search element found at position %d",res+1);
printf("\nThe exicution time is = %f miliseconds",time_taken);
}
getch();
}


PROGRAM - 2  (BINARY SEARCH)

#include<stdio.h>
#include<time.h>
#include<stdlib.h>
int binarySearch(int a[],int key,int n,int first,int last)
{
int mid,i,j,temp;
if(last<first)
return -1;
for(i=0;i<=n-2;i++)
{
for(j=0;j<=n-2;j++)
{
if(a[j+1]<a[j])
{
temp=a[j];
a[j]=a[j+1];
a[j+1]=temp;
}
}
}
while(first<=last)
{
mid=(first+last)/2;
if(key==a[mid])
return mid+1;
else if(key<a[mid])
last=mid-1;
else
first=mid+1;
}
return -1;
}
void main()
{
char ch;
int a[100],n,key,i,res,first,last,CLOCK_PER_SEC;
float clock_t,st,et;
float time_taken;
clrscr();
printf("Enter the number of elements in the array: \n");
scanf("%d",&n);
printf("Enter the elements of the array:\n");
for(i=0;i<n;i++)
scanf("%d",&a[i]);
printf("Enter the key element to search:\n");
scanf("%d",&key);
first=0;
last=n-1;
st=clock();
delay(100);
res=binarySearch(a,key,n,first,last);
printf("the sorted array is:");
for(i=0;i<n;i++)
printf("%d",a[i]);
et=clock();
time_taken=(((float)(et-st))/CLOCK_PER_SEC);
if(res==-1)
{
printf("\n The search element is not found \n");
printf("The execution time is %f millisecond:",time_taken);
}
else
printf("\n Search element is found at position %d \n",res);
printf("\n The execution time is %f millisecond:",time_taken);
getch();
}


PROGRAM - 3  (TOWARS)

#include<stdio.h>
#include<conio.h>
void toh(int,char,char,char);
int count=0;
main()
{
char source ='s',temp='t',dest='d';
int n;
clrscr();
printf("Enter the number of Disks: \n");
scanf("%d",&n);
printf("Sequence is:\n");
toh(n,source,temp,dest);
printf("The number of moves:%d",count);
getch();
}
void toh(int n,char source,char temp,char dest)
{
if(n>0)
{
toh(n-1,source,dest,temp);
printf("Move Disk %d %c -> %c \n",n,source,dest);
count++;
toh(n-1,temp,source,dest);
}
}



PROGRAM - 4 (SELECTION SORT)

#include<stdio.h>
#include<conio.h>
#include<time.h>
#include<stdlib.h>
void selectionSort(int a[],int n);
void main()
{
int a[100],n,i;
float s,e,clock_t;
clrscr();
printf("Enter the number of elements:");
scanf("%d",&n);
for(i=0;i<n;i++)
a[i]=rand() % 100;
printf("The random numbers generated by the system are \n");
for(i=0;i<n;i++)
printf("%d \t",a[i]);
s=clock();
delay(1000);
selectionSort(a,n);
e=clock();
printf("\n the sorted list:");
for(i=0;i<n;i++)
printf("%d \t",a[i]);
printf("\n Time taken is %f",(e-s)/CLK_TCK);
getch();
}
void selectionSort(int a[],int n)
{
int i,j,temp;
for(i=0;i<n;i++)
{
for(j=i+1;j<n;j++)
{
if(a[i]>a[j])
{
temp=a[i];
a[i]=a[j];
a[j]=temp;
}
}
}
}


PROGRAM - 5 (QUICKSORT)

#include<stdio.h>
#include<conio.h>
#include<time.h>
void quicksort(int a[10],int low,int high)
{
int j;
if(low<high)
{
j=partition(a,low,high);
quicksort(a,low,j-1);
quicksort(a,j+1,high);
}
}
int partition(int a[10],int low,int high)
{
int pivot,j,temp,i;
pivot=low;
i=low;
j=high;
while(i<j)
{
while(i<high && a[i] <= a[pivot])
i++;
while(a[j] > a[pivot])
j--;
if(i<j)
{
temp = a[i];
a[i] = a[j];
a[j] = temp;
}
}
temp=a[pivot];
a[pivot]=a[j];
a[j]=temp;
return j;
}
void main()
{
int i,n,a[10];
float clock_t,st,et;
float time_taken;
clrscr();
printf("Enter the number of elements of array:");
scanf("%d",&n);
printf("Enter the elements of the array:");
for(i=0;i<n;i++)
scanf("%d",&a[i]);
st=clock();
delay(50);
quicksort(a,0,n-1);
et=clock();
time_taken=((double)(et-st)/CLK_TCK);
printf("Sorted list of elements:");
for(i=0;i<n;i++)
printf("%d ",a[i]);
printf("\n The execution time=%lf",time_taken);
getch();
}


PROGRAM - 6(FLOYADAL)


#include<stdio.h>
#include<conio.h>
int c[5][5],n,i,j,k;
void floyd()
{
for(k=1;k<=n;k++)
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
if(c[i][k]+c[k][j]<c[i][j])
c[i][j]=c[i][k]+c[k][j];
}
void main()
{
clrscr();
printf("Enter the number of the vertices:\n");
scanf("%d",&n);
printf("Enter the adjacency matrix:\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
{
scanf("%d",&c[i][j]);
if(c[i][j]==0)
c[i][j]=999;
}
floyd();
for(i=1;i<=n;i++)
c[i][i]=0;
printf("\n The all pair shortest path:\n");
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
printf("%d ",c[i][j]);
printf("\n");
}
getch();
}


PROGRAM - 7  (TREES)


#include<stdio.h>
#include<conio.h>
int vis[10]={0},min,mincost=0,cost[10][10];
int a,b,u,v,i,j,n,ne=1;
void main()
{
clrscr();
printf("Enter number of vertices:");
scanf("%d",&n);
printf("Enter the adjacent matrix \n");
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
{
scanf("%d",&cost[i][j]);
if(cost[i][j]==0)
cost[i][j]=999;
}
}
vis[1]=1;
printf("\n");
while(ne<n)
{
for(i=1,min=999;i<=n;i++)
for(j=1;j<=n;j++)
if(cost[i][j]<min)
if(vis[1]!=0)
{
min=cost[i][j];
a=u=i;
b=v=j;
}
if(vis[u]==0||vis[v]==0)
{
printf("%d,cost of edge < %d,%d > =%d\n",ne++,a,b,min);
mincost+=min;
vis[b]=1;
}
cost[a][b]=cost[b][a]=999;
}
printf("\n Total minimum cost = %d \n",mincost);
getch();
}


PROGRAM - 8  (SUBSET)

#include<stdio.h>
#include<conio.h>
int w[10],d,n,count,x[10],i;
void sum_of_subsets(int s,int k,int r)
{
x[k]=1;
if(s+w[k]==d)
{
printf("\n Subset %d =",++count);
for(i=0;i<=k;i++)
if(x[i])
printf("%d",w[i]);
}
else if(s+w[k]+w[k+1]<=d)
sum_of_subsets(s+w[k],k+1,r-w[k]);
if((s+r-w[k]>=d)&&(s+w[k+1]<=d))
{
x[k]=0;
sum_of_subsets(s,k+1,r-w[k]);
}
}
void main()
{
int sum=0,k;
clrscr();
printf("\n Enter the number of elements:");
scanf("%d",&n);
printf("Enter the elements in ascending order:\n");
for(i=0;i<n;i++)
scanf("%d",&w[i]);
printf("\n Enter the sum:");
scanf("%d",&d);
for(i=0;i<n;i++)
x[i]=0;
for(i=0;i<n;i++)
sum=sum+w[i];
if(sum<d||w[0]>d)
printf("\n No subset possible");
else
sum_of_subsets( 0, 0, sum);
getch();
}


PROGRAM - 9 (CONQURE)

#include<stdio.h>
#include<conio.h>
int powerb(int x,unsigned int y)
{
if(y==0)
return 1;
else if(y%2==0)
return powerb(x,y/2)*powerb(x,y/2);
else
return x*powerb(x,y/2)*powerb(x,y/2);
}
int powerd(int x,unsigned int y)
{
int temp;
if(y==0)
return 1;
temp=powerd(x,y/2);
if(y%2==0)
return temp*temp;
else
return x*temp*temp;
}
void main()
{
int x,choice;
unsigned int y;
clrscr();
printf("Enter the value of x");
scanf("%d",&x);
printf("Enter the value of y");
scanf("%d",&y);
printf("Enter 1-brute force method\n");
printf("Enter 2-divide and conquer method\n");
printf("\n Enter your choice:");
scanf("%d",&choice);
switch(choice)
{
case 1:
printf("The result using brute force method:");
printf("%d",powerb(x,y));
break;
case 2:
printf("The result using divide and conquer:");
printf("%d",powerd(x,y));
break;
default:
printf("Enter valid choice");
}
getch();
}


PROGRAM - 10 (TOPOLOGICAL SORTING)



#include<stdio.h>
#include<conio.h>
void Topological(int a[10][10],int n);
void main()
{
int a[10][10],n;
int i,j;
clrscr();
printf("Enter the number f vertices of a DAG \n");
scanf("%d",&n);
printf("Enter the adjacency matrix \n");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
scanf("%d",&a[i][j]);
Topological(a,n);
printf("\n");
getch();
}
void Topological(int a[10][10],int n)
{
int in[10],out[10],stack[10],top=-1;
int i,j,k=0;
for(i=0;i<n;i++)
{
in[i]=0;
for(j=0;j<n;j++)
if(a[j][i]==1)
in[i]++;
}
while(1)
{
for(i=0;i<n;i++)
{
if(in[i]==0)
{
stack[++top]=i;
in[i]=-1;
}
}
if(top==-1)
break;
out[k]=stack[top--];
for(i=0;i<n;i++)
{
if(a[out[k]][i]==1)
in[i]--;
}
k++;
}
printf("Topological ordering/sorting for a DAG is");
for(i=0;i<n;i++)
printf("%d",out[i]+1);
}


PROGRAM - 11  (BFS)


#include<stdio.h>
#include<conio.h>
int q[10],f=-1,r=-1;
void qins(int x)
{
if(f==-1&&r==-1)
{
f++;
q[++r]=x;
}
else
q[++r]=x;
}
int qdel()
{
int x=q[f];
if(f==r)
f=r=-1;
else
f++;
return x;
}
void main()
{
int u,s[10]={0},src,n,a[10][10],i,j;
clrscr();
printf("\n Enter no of vertices:\n");
scanf("%d",&n);
printf("\n Enter the adjacency matrix:\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
scanf("%d",&a[i][j]);
printf("\n Enter the source vertex:");
scanf("%d",&src);
s[src]=1;
qins(src);
while(f!=-1&&r!=-1)
{
u=qdel();
printf("%d \t",u);
for(i=1;i<=n;i++)
if(a[u][i]==1&&s[i]==0)
{
s[i]=1;
qins(i);
}
}
printf("\n The nodes that are reacheable from %d are:\n",src);
for(i=1;i<=n;i++)
if(s[i])
printf("%d \n",i);
getch();
}


PROGRAM - 12 (WARSHALL)


#include<stdio.h>
#include<conio.h>
void warshalls(int c[][10],int n)
{
int i,j,k;
for(k=1;k<=n;k++)
{
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
{
if(c[i][j] || (c[i][k] && c[k][j]))
c[i][j] = 1;
}
}
}
printf("The transitive closure of the graph is:\n");
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
printf("%d ",c[i][j]);
printf("\n");
}
}
int main()
{
int c[10][10],n,i,j;
clrscr();
printf("Enter the number of vetices:");
scanf("%d",&n);
printf("Enter the adjacency cost matrix:\n");
for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
scanf("%d",&c[i][j]);
warshalls(c,n);
getch();
return 0;
}


